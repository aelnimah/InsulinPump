// ===== File: Profile.h =====
#ifndef PROFILE_H
#define PROFILE_H

#include <string>
#include <vector>
#include "BasalSegment.h"

// Represents Personal Profile
class Profile {
private:
    std::string name;
    std::vector<BasalSegment*> basalSegments;
    double insulinToCarbRatio;
    double correctionFactor;
    double targetBG;

public:
    Profile();
    ~Profile(); 

    bool isValid() const;
    double getBasalRateForTime(double hour) const;

    std::string getName() const;
    void setName(const std::string &n);
    double getInsulinToCarbRatio() const;
    void setInsulinToCarbRatio(double ratio);
    double getCorrectionFactor() const;
    void setCorrectionFactor(double factor);
    double getTargetBG() const;
    void setTargetBG(double bg);

    const std::vector<BasalSegment*>& getBasalSegments() const;
    void addBasalSegment(BasalSegment* segment);
};

#endif // PROFILE_H


// ===== File: Profile.cpp =====
#include "Profile.h"
#include "BasalSegment.h"

// Constructor
Profile::Profile() : insulinToCarbRatio(0.0), correctionFactor(0.0), targetBG(0.0) {}

// Destructor: Clean up all basal segments
Profile::~Profile() {
    for (auto* seg : basalSegments) {
        delete seg;
    }
    basalSegments.clear();
}

// Validate profile settings and basal segments
bool Profile::isValid() const {
    if (name.empty() || insulinToCarbRatio <= 0 || correctionFactor <= 0 || targetBG <= 0)
        return false;
    for (const auto& seg : basalSegments) {
        if (seg->getStartTime() >= seg->getEndTime() || seg->getUnitsPerHour() < 0)
            return false;
    }
    return true;
}

// Return basal rate for specified hour based on defined segments
double Profile::getBasalRateForTime(double hour) const {
    for (const auto& segment : basalSegments) {
        if (segment->timeInSegment(hour))
            return segment->getUnitsPerHour();
    }
    return 0.0;
}

std::string Profile::getName() const { return name; }
void Profile::setName(const std::string &n) { name = n; }
double Profile::getInsulinToCarbRatio() const { return insulinToCarbRatio; }
void Profile::setInsulinToCarbRatio(double ratio) { insulinToCarbRatio = ratio; }
double Profile::getCorrectionFactor() const { return correctionFactor; }
void Profile::setCorrectionFactor(double factor) { correctionFactor = factor; }
double Profile::getTargetBG() const { return targetBG; }
void Profile::setTargetBG(double bg) { targetBG = bg; }

const std::vector<BasalSegment*>& Profile::getBasalSegments() const {
    return basalSegments;
}

// Add basal segment to profile
void Profile::addBasalSegment(BasalSegment* segment) {
    basalSegments.push_back(segment);
}


// ===== File: ProfileManager.h =====
#ifndef PROFILEMANAGER_H
#define PROFILEMANAGER_H

#include <string>
#include <vector>

class Profile;

// Manages collection of profiles and active profile
class ProfileManager {
private:
    std::vector<Profile*> profiles;  // List of all profiles
    Profile* activeProfile;          // Current active profile

public:
    ProfileManager();
    ~ProfileManager();

    void createProfile(Profile* newProfile);
    Profile* getProfileByName(const std::string& name);
    void updateProfile(Profile* updatedProfile);
    void deleteProfile(const std::string& name);

    Profile* getActiveProfile() const;
    void setActiveProfile(const std::string& profileName);

    std::vector<Profile*> getAllProfiles() const;
};

#endif // PROFILEMANAGER_H


// ===== File: ProfileManager.cpp =====
#include "ProfileManager.h"
#include "Profile.h"
#include <iostream>
#include <algorithm>

// Constructor: Start with no active profile
ProfileManager::ProfileManager() : activeProfile(nullptr) {}

// Destructor: Delete all stored profiles
ProfileManager::~ProfileManager() {
    for (auto profile : profiles) {
        delete profile;
    }
    profiles.clear();
}

// Create a new profile if valid
void ProfileManager::createProfile(Profile* newProfile) {
    if (newProfile && newProfile->isValid()) {
        profiles.push_back(newProfile);
        std::cout << "Profile '" << newProfile->getName() << "' created.\n";
    } else {
        std::cout << "Invalid profile. Not created.\n";
    }
}

// Return profile with matching name
Profile* ProfileManager::getProfileByName(const std::string& name) {
    for (auto* profile : profiles) {
        if (profile->getName() == name) {
            return profile;
        }
    }
    return nullptr;
}

// Update existing profile with new data
void ProfileManager::updateProfile(Profile* updatedProfile) {
    for (size_t i = 0; i < profiles.size(); ++i) {
        if (profiles[i]->getName() == updatedProfile->getName()) {
            delete profiles[i];  // Clean up old data
            profiles[i] = updatedProfile;
            std::cout << "Profile '" << updatedProfile->getName() << "' updated.\n";
            return;
        }
    }
    std::cout << "Profile not found for update.\n";
}

// Delete profile with given name
void ProfileManager::deleteProfile(const std::string& name) {
    auto it = std::remove_if(profiles.begin(), profiles.end(), [&](Profile* p) {
        if (p->getName() == name) {
            // Reset active profile if neccesary
            if (activeProfile == p) {
                activeProfile = nullptr;
            }
            delete p;
            std::cout << "Profile '" << name << "' deleted.\n";
            return true;
        }
        return false;
    });
    profiles.erase(it, profiles.end());
}

// Return active profile
Profile* ProfileManager::getActiveProfile() const {
    return activeProfile;
}

// Set active profile if exists
void ProfileManager::setActiveProfile(const std::string& profileName) {
    Profile* found = getProfileByName(profileName);
    if (found) {
        activeProfile = found;
        std::cout << "Active profile set to '" << profileName << "'.\n";
    } else {
        std::cout << "Profile not found.\n";
    }
}

// Return list of all profiles
std::vector<Profile*> ProfileManager::getAllProfiles() const {
    return profiles;
}


// ===== File: ProfileCRUDManager.h =====
#ifndef PROFILECRUDCONTROLLER_H
#define PROFILECRUDCONTROLLER_H

#include <string>

class ProfileManager; // Forward declaration

// Provides CRUD operations for profiles via ProfileManager
class ProfileCRUDController {
private:
    ProfileManager* profileManager; // Manager to delegate profile operations

public:
    ProfileCRUDController(ProfileManager* mgr);

    void createProfile(const std::string& name, double icr, double corr, double tbg);
    void updateProfile(const std::string& oldName, const std::string& newName, double icr, double corr, double tbg);
    void deleteProfile(const std::string& name);
};

#endif // PROFILECRUDCONTROLLER_H


// ===== File: ProfileCRUDManager.cpp =====
#include "ProfileCRUDController.h"
#include "ProfileManager.h"
#include "Profile.h"
#include "BasalSegment.h"
#include <iostream>

// Constructor: Stores ProfileManager instance
ProfileCRUDController::ProfileCRUDController(ProfileManager* mgr) : profileManager(mgr) {}

// Create a new profile, add default basal segment, delegate to ProfileManager
void ProfileCRUDController::createProfile(const std::string& name, double icr, double corr, double tbg) {
    Profile* p = new Profile();
    p->setName(name);
    p->setInsulinToCarbRatio(icr);
    p->setCorrectionFactor(corr);
    p->setTargetBG(tbg);

    // Add default basal segment covering full day
    BasalSegment* seg = new BasalSegment(0.0, 24.0, 1.0);
    p->addBasalSegment(seg);

    profileManager->createProfile(p);
}

// Update profile settings for profile with specified old name
void ProfileCRUDController::updateProfile(const std::string& oldName, const std::string& newName, double icr, double corr, double tbg) {
    Profile* profile = profileManager->getProfileByName(oldName);
    if (profile) {
        profile->setName(newName);
        profile->setInsulinToCarbRatio(icr);
        profile->setCorrectionFactor(corr);
        profile->setTargetBG(tbg);
    }
}

// Delete profile with given name via ProfileManager
void ProfileCRUDController::deleteProfile(const std::string& name) {
    profileManager->deleteProfile(name);
}


// ===== File: PumpSimulator.h =====
#ifndef PUMPSIMULATOR_H
#define PUMPSIMULATOR_H

class ProfileManager; // Forward declaration


// Controls simulation (starting, stopping, updating state)
class PumpSimulator {
private:
    bool isRunning;
    ProfileManager* profileManager;

public:
    PumpSimulator();
    ~PumpSimulator();

    void startSimulation();
    void stopSimulation();
    void updateSimulationState();
    void shutdown();

    bool getIsRunning() const;
    void setIsRunning(bool running);

    void setProfileManager(ProfileManager* mgr);
    ProfileManager* getProfileManager();
};

#endif // PUMPSIMULATOR_H


// ===== File: PumpSimulator.cpp =====
#include "PumpSimulator.h"
#include "ProfileManager.h"
#include <iostream>

// Constructor: Simulation starts off and no profile manager is assigned
PumpSimulator::PumpSimulator()
    : isRunning(false), profileManager(nullptr) {}

// Destructor: No dynamic memory to free
PumpSimulator::~PumpSimulator() {}

// Starts simulation
void PumpSimulator::startSimulation() {
    isRunning = true;
    std::cout << "[PumpSimulator] Simulation started.\n";
}

// Stops simulations
void PumpSimulator::stopSimulation() {
    isRunning = false;
    std::cout << "[PumpSimulator] Simulation stopped.\n";
}

// ...
void PumpSimulator::updateSimulationState() {
    // Placeholder for time-based logic (e.g. IOB or basal checks).
}

// Shutdown: Stop simulation and perform final cleanup
void PumpSimulator::shutdown() {
    std::cout << "[PumpSimulator] Shutting down.\n";
    stopSimulation();
}

// True if simulation is running
bool PumpSimulator::getIsRunning() const { return isRunning; }

// Set simultion running state
void PumpSimulator::setIsRunning(bool running) { isRunning = running; }

// Assigns a ProfileManager for profile interactions
void PumpSimulator::setProfileManager(ProfileManager* mgr) {
    profileManager = mgr;
}

// Returns currently assigned ProfileManager
ProfileManager* PumpSimulator::getProfileManager() {
    return profileManager;
}


// ===== File: BasalSegment.h =====
#ifndef BASALSEGMENT_H
#define BASALSEGMENT_H

// Represents time segment for basal insulin delivery
class BasalSegment {
private:
    double startTime;
    double endTime;
    double unitsPerHour;

public:
    BasalSegment();
    BasalSegment(double start, double end, double units);

    bool timeInSegment(double hour) const;

    double getStartTime() const;
    void setStartTime(double start);
    double getEndTime() const;
    void setEndTime(double end);
    double getUnitsPerHour() const;
    void setUnitsPerHour(double units);
};

#endif // BASALSEGMENT_H


// ===== File: BasalSegment.cpp =====
#include "BasalSegment.h"

// Constructor: Default -> Initialize members to 0
BasalSegment::BasalSegment() : startTime(0.0), endTime(0.0), unitsPerHour(0.0) {}

// Constructor: Parameterized -> Initialize members with given values
BasalSegment::BasalSegment(double start, double end, double units)
    : startTime(start), endTime(end), unitsPerHour(units) {}

// True if hour falls within [startTime, endTime)
bool BasalSegment::timeInSegment(double hour) const {
    return hour >= startTime && hour < endTime;
}

double BasalSegment::getStartTime() const { return startTime; }
void BasalSegment::setStartTime(double start) { startTime = start; }
double BasalSegment::getEndTime() const { return endTime; }
void BasalSegment::setEndTime(double end) { endTime = end; }
double BasalSegment::getUnitsPerHour() const { return unitsPerHour; }
void BasalSegment::setUnitsPerHour(double units) { unitsPerHour = units; }


// ===== File: MainWindow.h =====
#include <QMainWindow>

#include "Profile.h"

#include <QTime>

class QTimer;
class QStackedWidget;
class QPushButton;
class QLabel;

class ProfileManager;
class ProfileCRUDController;
class OptionsWindow;
class PersonalProfilesWindow;
class AddProfileWindow;
class ViewProfileWindow;

class MainWindow : public QMainWindow {
    Q_OBJECT

public:
    MainWindow(ProfileManager* mgr, QWidget* parent = nullptr);
    ~MainWindow();

private:
    ProfileManager* profileManager;
    ProfileCRUDController* crudController;
    QStackedWidget* stackedWidget;
    QWidget* homePage;
    OptionsWindow* optionsPage;
    PersonalProfilesWindow* profilesPage;
    AddProfileWindow* addProfilePage;
    ViewProfileWindow* viewProfilePage;

    QTime simulationTime;
    QTimer* simulationTimer;
    QLabel* simTimeLabel;

    void setupHomePage();

private slots:
    void updateSimulationClock();
    void showOptionsPage();
    void showProfilesPage();
    void showHomePage();
    void showAddProfilePage();
    void showViewProfilePage(Profile* profile);
};


// ===== File: MainWindow.cpp =====
#include "MainWindow.h"
#include "OptionsWindow.h"
#include "PersonalProfilesWindow.h"
#include "AddProfileWindow.h"
#include "ViewProfileWindow.h"

#include "ProfileManager.h"
#include "ProfileCRUDController.h"

#include <QPushButton>
#include <QVBoxLayout>
#include <QStackedWidget>
#include <QTimer>
#include <QLabel>
#include <QTime>

MainWindow::MainWindow(ProfileManager* mgr, QWidget* parent)
    : QMainWindow(parent), profileManager(mgr)
{
    crudController = new ProfileCRUDController(profileManager);
    stackedWidget = new QStackedWidget(this);

    // Create pages
    setupHomePage();
    optionsPage = new OptionsWindow(profileManager);
    profilesPage = new PersonalProfilesWindow(profileManager, crudController);
    addProfilePage = new AddProfileWindow(crudController);
    viewProfilePage = new ViewProfileWindow(nullptr, crudController, profileManager, this);

    // Add pages to the stacked widget
    stackedWidget->addWidget(homePage);        // index 0
    stackedWidget->addWidget(optionsPage);       // index 1
    stackedWidget->addWidget(profilesPage);      // index 2
    stackedWidget->addWidget(addProfilePage);    // index 3
    stackedWidget->addWidget(viewProfilePage);   // index 4

    // --- Setup Simulation Clock ---
    // Initialize simulation time to 00:00
    simulationTime = QTime(0, 0, 0);
    simTimeLabel = new QLabel(simulationTime.toString("hh:mm"), this);
    simTimeLabel->setAlignment(Qt::AlignCenter);
    simTimeLabel->setStyleSheet("font-weight: bold; font-size: 18px;");

    // Create a timer that updates the simulation clock every 2000ms (2 seconds)
    simulationTimer = new QTimer(this);
    connect(simulationTimer, &QTimer::timeout, this, &MainWindow::updateSimulationClock);
    simulationTimer->start(2000);

    // --- Layout Setup ---
    // Place the simulation clock on top, and the stacked widget below it.
    QVBoxLayout* mainLayout = new QVBoxLayout();
    mainLayout->addWidget(simTimeLabel);
    mainLayout->addWidget(stackedWidget);
    QWidget* container = new QWidget(this);
    container->setLayout(mainLayout);
    setCentralWidget(container);

    setWindowTitle("Insulin Pump Simulator");
    resize(480, 320);

    // --- Navigation Connections ---
    connect(optionsPage, &OptionsWindow::personalProfilesClicked, this, &MainWindow::showProfilesPage);
    connect(optionsPage, &OptionsWindow::homeClicked, this, &MainWindow::showHomePage);
    connect(profilesPage, &PersonalProfilesWindow::goToAddProfile, this, &MainWindow::showAddProfilePage);
    connect(profilesPage, &PersonalProfilesWindow::backToOptions, this, &MainWindow::showOptionsPage);
    connect(profilesPage, &PersonalProfilesWindow::viewProfile, this, &MainWindow::showViewProfilePage);

    connect(addProfilePage, &AddProfileWindow::profileAdded, this, [=]() {
        profilesPage->refreshProfileList();
        stackedWidget->setCurrentWidget(profilesPage);
    });

    connect(addProfilePage, &AddProfileWindow::cancelled, this, [=]() {
        stackedWidget->setCurrentWidget(profilesPage);
    });

    connect(viewProfilePage, &ViewProfileWindow::backToProfiles, this, &MainWindow::showProfilesPage);
}

MainWindow::~MainWindow() {}

void MainWindow::setupHomePage() {
    homePage = new QWidget(this);
    QVBoxLayout* layout = new QVBoxLayout(homePage);
    QPushButton* optionsButton = new QPushButton("Options", this);
    layout->addWidget(optionsButton);
    connect(optionsButton, &QPushButton::clicked, this, &MainWindow::showOptionsPage);
}

void MainWindow::showOptionsPage() {
    stackedWidget->setCurrentWidget(optionsPage);
}

void MainWindow::showProfilesPage() {
    profilesPage->refreshProfileList();
    stackedWidget->setCurrentWidget(profilesPage);
}

void MainWindow::showAddProfilePage() {
    stackedWidget->setCurrentWidget(addProfilePage);
}

void MainWindow::showViewProfilePage(Profile* profile) {
    viewProfilePage->setProfile(profile);
    stackedWidget->setCurrentWidget(viewProfilePage);
}

void MainWindow::showHomePage() {
    stackedWidget->setCurrentWidget(homePage);
}

void MainWindow::updateSimulationClock() {
    // Add one simulation minute (60 seconds) per timer tick
    simulationTime = simulationTime.addSecs(60);
    simTimeLabel->setText(simulationTime.toString("hh:mm"));
}


// ===== File: OptionsWindow.h =====
#ifndef OPTIONSWINDOW_H
#define OPTIONSWINDOW_H

#include <QWidget>

class QPushButton;
class ProfileManager;

class OptionsWindow : public QWidget {
    Q_OBJECT

public:
    explicit OptionsWindow(ProfileManager* mgr, QWidget *parent = nullptr);

signals:
    void personalProfilesClicked();
    void homeClicked();

private:
    QPushButton* personalProfilesButton;
    ProfileManager* profileManager;
};

#endif // OPTIONSWINDOW_H


// ===== File: OptionsWindow.cpp =====
#include "OptionsWindow.h"
#include <QPushButton>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QSpacerItem>
#include "ProfileManager.h"

OptionsWindow::OptionsWindow(ProfileManager* mgr, QWidget *parent)
    : QWidget(parent), profileManager(mgr)
{
    setWindowTitle("Options");
    personalProfilesButton = new QPushButton("Personal Profiles", this);
    QPushButton* homeButton = new QPushButton("Home", this);

    // Main vertical layout
    QVBoxLayout* mainLayout = new QVBoxLayout(this);

    // Add your "Personal Profiles" button at the top
    mainLayout->addWidget(personalProfilesButton);

    // Add a vertical spacer to push subsequent widgets to the bottom
    mainLayout->addSpacerItem(new QSpacerItem(
        0, 0, 
        QSizePolicy::Minimum, 
        QSizePolicy::Expanding
    ));

    // Create a horizontal layout for the Home button
    QHBoxLayout* bottomLayout = new QHBoxLayout();
    bottomLayout->addStretch();     // push Home button to the right
    bottomLayout->addWidget(homeButton);

    // Add the bottom layout to the main layout
    mainLayout->addLayout(bottomLayout);

    // Connect signals
    connect(personalProfilesButton, &QPushButton::clicked, this, &OptionsWindow::personalProfilesClicked);
    connect(homeButton, &QPushButton::clicked, this, [this]() {
        emit homeClicked();
    });
}


// ===== File: PersonalProfilesWindow.h =====
#ifndef PERSONALPROFILESWINDOW_H
#define PERSONALPROFILESWINDOW_H

#include <QWidget>
#include <QListWidget>
#include <QPushButton>
#include <QVBoxLayout>

#include "Profile.h"

class ProfileManager;
class ProfileCRUDController;
class QListWidgetItem;

class PersonalProfilesWindow : public QWidget {
    Q_OBJECT

public:
    PersonalProfilesWindow(ProfileManager* manager, ProfileCRUDController* crud, QWidget* parent = nullptr);
    
    void refreshProfileList();

private slots:
    void onAddClicked();
    void onSetActiveClicked();
    void onDeleteClicked();
    void onBackClicked();
    void onProfileDoubleClicked(QListWidgetItem* item);

private:
    ProfileManager* profileManager;
    ProfileCRUDController* controller;

    QListWidget* profileList;
    QPushButton* addButton;
    QPushButton* deleteButton;
    QPushButton* setActiveButton;
    QPushButton* backButton;

signals:
    void backToOptions();
    void goToAddProfile(); 
    void viewProfile(Profile* profile);
};

#endif


// ===== File: PersonalProfilesWindow.cpp =====
#include "PersonalProfilesWindow.h"
#include "ProfileManager.h"
#include "ProfileCRUDController.h"
#include "AddProfileWindow.h"
#include "Profile.h"

#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QMessageBox>
#include <QListWidgetItem>

#include <QDebug>

PersonalProfilesWindow::PersonalProfilesWindow(ProfileManager* mgr, ProfileCRUDController* crud, QWidget* parent)
    : QWidget(parent), profileManager(mgr), controller(crud)
{
    setWindowTitle("Personal Profiles");
    QVBoxLayout* mainLayout = new QVBoxLayout(this);

    profileList = new QListWidget(this);
    mainLayout->addWidget(profileList);

    connect(profileList, &QListWidget::itemDoubleClicked, this, &PersonalProfilesWindow::onProfileDoubleClicked);

    QHBoxLayout* buttonLayout = new QHBoxLayout();
    addButton = new QPushButton("Add", this);
    setActiveButton = new QPushButton("Set Active", this);
    deleteButton = new QPushButton("Delete", this);
    backButton = new QPushButton("Back", this);

    buttonLayout->addWidget(addButton);
    buttonLayout->addWidget(setActiveButton); 
    buttonLayout->addWidget(deleteButton);
    buttonLayout->addWidget(backButton);

    mainLayout->addLayout(buttonLayout);

    connect(addButton, &QPushButton::clicked, this, &PersonalProfilesWindow::onAddClicked);
    connect(setActiveButton, &QPushButton::clicked, this, &PersonalProfilesWindow::onSetActiveClicked);
    connect(deleteButton, &QPushButton::clicked, this, &PersonalProfilesWindow::onDeleteClicked);
    connect(backButton, &QPushButton::clicked, this, &PersonalProfilesWindow::onBackClicked);

    refreshProfileList();
}

void PersonalProfilesWindow::refreshProfileList() {
    profileList->clear();
    auto profiles = profileManager->getAllProfiles();
    Profile* activeProfile = profileManager->getActiveProfile();  // Get current active profile

    for (const auto* profile : profiles) {
        QListWidgetItem* item = new QListWidgetItem(QString::fromStdString(profile->getName()));
        if (activeProfile && activeProfile->getName() == profile->getName()) {
            // Create a small green dot icon
            QPixmap pixmap(10, 10);
            pixmap.fill(Qt::green);
            item->setIcon(QIcon(pixmap));
        }
        profileList->addItem(item);
    }
}

void PersonalProfilesWindow::onAddClicked() {
    emit goToAddProfile();
}

void PersonalProfilesWindow::onSetActiveClicked() {
    qDebug() << "Set Active button clicked.";
    QListWidgetItem* selected = profileList->currentItem();
    if (!selected) {
        QMessageBox::warning(this, "No Selection", "Please select a profile to set active.");
        return;
    }
    QString name = selected->text();
    profileManager->setActiveProfile(name.toStdString());
    QMessageBox::information(this, "Active Profile", "Profile '" + name + "' is now active.");
    refreshProfileList();
}

void PersonalProfilesWindow::onDeleteClicked() {
    QListWidgetItem* selected = profileList->currentItem();
    if (!selected) return;

    QString name = selected->text();
    auto confirm = QMessageBox::question(this, "Confirm Delete",
                      "Delete profile '" + name + "'?",
                      QMessageBox::Yes | QMessageBox::No);

    if (confirm == QMessageBox::Yes) {
        profileManager->deleteProfile(name.toStdString());
        refreshProfileList();
    }
}

void PersonalProfilesWindow::onBackClicked() {
    emit backToOptions();
}

void PersonalProfilesWindow::onProfileDoubleClicked(QListWidgetItem* item) {
    auto* p = profileManager->getProfileByName(item->text().toStdString());
    if (p) emit viewProfile(p);
}


// ===== File: AddProfileWindow.h =====
#ifndef ADDPROFILEWINDOW_H
#define ADDPROFILEWINDOW_H

#include <QWidget>

class QLineEdit;
class QDoubleSpinBox;
class QPushButton;
class ProfileCRUDController;

class AddProfileWindow : public QWidget {
    Q_OBJECT

public:
    AddProfileWindow(ProfileCRUDController* controller, QWidget* parent = nullptr);

signals:
    void profileAdded();
    void cancelled();

private slots:
    void onSaveClicked();
    void onCancelClicked();

private:
    ProfileCRUDController* crudController;

    QLineEdit* nameEdit;
    QDoubleSpinBox* icrSpin;
    QDoubleSpinBox* corrSpin;
    QDoubleSpinBox* targetBGSpin;

    QPushButton* saveButton;
    QPushButton* cancelButton;
};

#endif // ADDPROFILEWINDOW_H


// ===== File: AddProfileWindow.cpp =====
#include "AddProfileWindow.h"
#include "ProfileCRUDController.h"

#include <QVBoxLayout>
#include <QFormLayout>
#include <QLineEdit>
#include <QDoubleSpinBox>
#include <QPushButton>
#include <QMessageBox>

AddProfileWindow::AddProfileWindow(ProfileCRUDController* controller, QWidget* parent)
    : QWidget(parent), crudController(controller)
{
    setWindowTitle("Add New Profile");

    nameEdit = new QLineEdit(this);

    icrSpin = new QDoubleSpinBox(this);
    icrSpin->setMinimum(0.1);
    icrSpin->setMaximum(100);

    corrSpin = new QDoubleSpinBox(this);
    corrSpin->setMinimum(0.1);
    corrSpin->setMaximum(100);

    targetBGSpin = new QDoubleSpinBox(this);
    targetBGSpin->setMinimum(1.0);
    targetBGSpin->setMaximum(20.0);

    saveButton = new QPushButton("Save", this);
    cancelButton = new QPushButton("Cancel", this);

    QFormLayout* formLayout = new QFormLayout();
    formLayout->addRow("Profile Name:", nameEdit);
    formLayout->addRow("Insulin/Carb Ratio:", icrSpin);
    formLayout->addRow("Correction Factor:", corrSpin);
    formLayout->addRow("Target BG:", targetBGSpin);

    QHBoxLayout* buttonLayout = new QHBoxLayout();
    buttonLayout->addWidget(saveButton);
    buttonLayout->addWidget(cancelButton);

    QVBoxLayout* mainLayout = new QVBoxLayout(this);
    mainLayout->addLayout(formLayout);
    mainLayout->addLayout(buttonLayout);

    connect(saveButton, &QPushButton::clicked, this, &AddProfileWindow::onSaveClicked);
    connect(cancelButton, &QPushButton::clicked, this, &AddProfileWindow::onCancelClicked);
}

void AddProfileWindow::onSaveClicked() {
    QString name = nameEdit->text().trimmed();
    if (name.isEmpty()) {
        QMessageBox::warning(this, "Validation Error", "Profile name cannot be empty.");
        return;
    }

    double icr = icrSpin->value();
    double corr = corrSpin->value();
    double tbg = targetBGSpin->value();

    crudController->createProfile(name.toStdString(), icr, corr, tbg);
    emit profileAdded();  // Let parent know a profile was added
    this->close();
}

void AddProfileWindow::onCancelClicked() {
    emit cancelled(); 
}



// ===== File: ViewProfileWindow.h =====
#pragma once

#include <QWidget>
#include <QLineEdit>
#include <QPushButton>
#include "Profile.h"
#include "ProfileCRUDController.h"

class ProfileManager;

class ViewProfileWindow : public QWidget {
    Q_OBJECT

public:
ViewProfileWindow(Profile* profile, ProfileCRUDController* controller, ProfileManager* mgr, QWidget* parent = nullptr);
    void setProfile(Profile* profile);

signals:
    void backToProfiles();

private slots:
    void onUpdateClicked();
    void onSaveClicked();

private:
    void setupUI();
    void loadProfileData();

    Profile* currentProfile;
    ProfileCRUDController* controller;
    ProfileManager* profileManager;

    QLineEdit* nameEdit;
    QLineEdit* icrEdit;
    QLineEdit* corrEdit;
    QLineEdit* targetBGEdit;

    QPushButton* updateButton;
    QPushButton* saveButton;
    QPushButton* backButton;
};


// ===== File: ViewProfileWindow.cpp =====
#include "ViewProfileWindow.h"
#include <QVBoxLayout>
#include <QFormLayout>
#include <QPushButton>
#include <QLineEdit>
#include <QLabel>
#include <QDoubleValidator>

#include "ProfileManager.h"

ViewProfileWindow::ViewProfileWindow(Profile* profile, ProfileCRUDController* controller, ProfileManager* mgr, QWidget* parent)
    : QWidget(parent), currentProfile(profile), controller(controller), profileManager(mgr)
{
    setupUI();
    loadProfileData();
}

void ViewProfileWindow::setupUI() {
    auto* layout = new QVBoxLayout(this);
    auto* formLayout = new QFormLayout();

    nameEdit = new QLineEdit(this);
    nameEdit->setReadOnly(true);
    formLayout->addRow("Name:", nameEdit);

    icrEdit = new QLineEdit(this);
    icrEdit->setReadOnly(true);
    icrEdit->setValidator(new QDoubleValidator(0, 100, 2, this));
    formLayout->addRow("ICR:", icrEdit);

    corrEdit = new QLineEdit(this);
    corrEdit->setReadOnly(true);
    corrEdit->setValidator(new QDoubleValidator(0, 100, 2, this));
    formLayout->addRow("Correction Factor:", corrEdit);

    targetBGEdit = new QLineEdit(this);
    targetBGEdit->setReadOnly(true);
    targetBGEdit->setValidator(new QDoubleValidator(0, 500, 2, this));
    formLayout->addRow("Target BG:", targetBGEdit);

    layout->addLayout(formLayout);

    auto* buttonLayout = new QHBoxLayout();

    updateButton = new QPushButton("Update", this);
    connect(updateButton, &QPushButton::clicked, this, &ViewProfileWindow::onUpdateClicked);
    buttonLayout->addWidget(updateButton);

    saveButton = new QPushButton("Save", this);
    saveButton->setEnabled(false);
    connect(saveButton, &QPushButton::clicked, this, &ViewProfileWindow::onSaveClicked);
    buttonLayout->addWidget(saveButton);

    backButton = new QPushButton("Back", this);
    connect(backButton, &QPushButton::clicked, this, &ViewProfileWindow::backToProfiles);
    buttonLayout->addWidget(backButton);

    layout->addLayout(buttonLayout);
}

void ViewProfileWindow::loadProfileData() {
    if (!currentProfile) return;

    nameEdit->setText(QString::fromStdString(currentProfile->getName()));
    icrEdit->setText(QString::number(currentProfile->getInsulinToCarbRatio()));
    corrEdit->setText(QString::number(currentProfile->getCorrectionFactor()));
    targetBGEdit->setText(QString::number(currentProfile->getTargetBG()));

    // Lock fields and disable save button
    nameEdit->setReadOnly(true);
    icrEdit->setReadOnly(true);
    corrEdit->setReadOnly(true);
    targetBGEdit->setReadOnly(true);
    saveButton->setEnabled(false);

    // Check if this profile is the active profile
    if (profileManager && profileManager->getActiveProfile() &&
        profileManager->getActiveProfile()->getName() == currentProfile->getName())
    {
        // Set a light-green background as an indicator
        nameEdit->setStyleSheet("background-color: lightgreen;");
    } else {
        // Clear any indicator if not active
        nameEdit->setStyleSheet("");
    }
}

void ViewProfileWindow::setProfile(Profile* profile) {
    currentProfile = profile;
    loadProfileData();
}

void ViewProfileWindow::onUpdateClicked() {
    nameEdit->setReadOnly(false);
    icrEdit->setReadOnly(false);
    corrEdit->setReadOnly(false);
    targetBGEdit->setReadOnly(false);
    saveButton->setEnabled(true);
}

void ViewProfileWindow::onSaveClicked() {
    if (!currentProfile) return;

    std::string oldName = currentProfile->getName();
    std::string newName = nameEdit->text().toStdString();
    double newICR = icrEdit->text().toDouble();
    double newCorr = corrEdit->text().toDouble();
    double newTBG = targetBGEdit->text().toDouble();

    controller->updateProfile(oldName, newName, newICR, newCorr, newTBG);

    // Update currentProfile fields directly
    currentProfile->setName(newName);
    currentProfile->setInsulinToCarbRatio(newICR);
    currentProfile->setCorrectionFactor(newCorr);
    currentProfile->setTargetBG(newTBG);

    // Reset view
    loadProfileData();

    emit backToProfiles();
}


